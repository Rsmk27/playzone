<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sudoku | PlayZone</title>
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
            font-family: 'Inter', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
        }

        .container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
            font-size: 2.5rem;
            text-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
        }

        .sudoku-grid {
            display: grid;
            grid-template-columns: repeat(9, 40px);
            grid-template-rows: repeat(9, 40px);
            gap: 2px;
            background: #333;
            padding: 10px;
            border-radius: 10px;
            margin: 20px auto;
        }

        .cell {
            width: 40px;
            height: 40px;
            background: #fff;
            border: 1px solid #ddd;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            font-weight: bold;
            color: #333;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .cell:hover {
            background: #e3f2fd;
        }

        .cell.selected {
            background: #2196f3;
            color: white;
        }

        .cell.given {
            background: #f5f5f5;
            color: #000;
            font-weight: bold;
        }

        .cell.error {
            background: #ffebee;
            color: #d32f2f;
        }

        .cell:nth-child(3n) {
            border-right: 3px solid #333;
        }

        .cell:nth-child(n+19):nth-child(-n+27),
        .cell:nth-child(n+46):nth-child(-n+54) {
            border-bottom: 3px solid #333;
        }

        .controls {
            display: flex;
            gap: 10px;
            margin: 20px 0;
            flex-wrap: wrap;
            justify-content: center;
        }

        .number-btn, .action-btn {
            padding: 10px 15px;
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            color: white;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 16px;
            font-weight: 500;
        }

        .number-btn:hover, .action-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        .back-btn {
            margin-top: 20px;
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            color: white;
            text-decoration: none;
            transition: all 0.2s ease;
            display: inline-block;
        }

        .back-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        .difficulty {
            margin-bottom: 20px;
            text-align: center;
        }

        .difficulty button {
            margin: 0 5px;
            padding: 8px 16px;
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 6px;
            color: white;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .difficulty button.active {
            background: #4caf50;
            border-color: #4caf50;
        }

        @media (max-width: 600px) {
            .sudoku-grid {
                grid-template-columns: repeat(9, 35px);
                grid-template-rows: repeat(9, 35px);
            }
            
            .cell {
                width: 35px;
                height: 35px;
                font-size: 16px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Sudoku</h1>
        
        <div class="difficulty">
            <button onclick="setDifficulty('easy')" class="active" id="easy-btn">Easy</button>
            <button onclick="setDifficulty('medium')" id="medium-btn">Medium</button>
            <button onclick="setDifficulty('hard')" id="hard-btn">Hard</button>
        </div>

        <div class="sudoku-grid" id="sudokuGrid"></div>
        
        <div class="controls">
            <button class="number-btn" onclick="selectNumber(1)">1</button>
            <button class="number-btn" onclick="selectNumber(2)">2</button>
            <button class="number-btn" onclick="selectNumber(3)">3</button>
            <button class="number-btn" onclick="selectNumber(4)">4</button>
            <button class="number-btn" onclick="selectNumber(5)">5</button>
            <button class="number-btn" onclick="selectNumber(6)">6</button>
            <button class="number-btn" onclick="selectNumber(7)">7</button>
            <button class="number-btn" onclick="selectNumber(8)">8</button>
            <button class="number-btn" onclick="selectNumber(9)">9</button>
            <button class="action-btn" onclick="clearCell()">Clear</button>
            <button class="action-btn" onclick="newGame()">New Game</button>
        </div>
        
        <a href="../index.html" class="back-btn">â¬… Back to Home</a>
    </div>

    <script>
        let grid = Array(9).fill().map(() => Array(9).fill(0));
        let solution = Array(9).fill().map(() => Array(9).fill(0));
        let selectedCell = null;
        let difficulty = 'easy';

        const difficultySettings = {
            easy: 40,
            medium: 30,
            hard: 20
        };

        function createGrid() {
            const gridElement = document.getElementById('sudokuGrid');
            gridElement.innerHTML = '';
            
            for (let i = 0; i < 81; i++) {
                const cell = document.createElement('div');
                cell.className = 'cell';
                cell.dataset.index = i;
                cell.addEventListener('click', () => selectCell(i));
                gridElement.appendChild(cell);
            }
        }

        function selectCell(index) {
            document.querySelectorAll('.cell').forEach(cell => {
                cell.classList.remove('selected');
            });
            
            selectedCell = index;
            document.querySelector(`[data-index="${index}"]`).classList.add('selected');
        }

        function selectNumber(num) {
            if (selectedCell === null) return;
            
            const row = Math.floor(selectedCell / 9);
            const col = selectedCell % 9;
            
            if (grid[row][col] === 0) { // Only allow changes to empty cells
                grid[row][col] = num;
                updateDisplay();
                checkWin();
            }
        }

        function clearCell() {
            if (selectedCell === null) return;
            
            const row = Math.floor(selectedCell / 9);
            const col = selectedCell % 9;
            
            if (grid[row][col] !== 0) {
                grid[row][col] = 0;
                updateDisplay();
            }
        }

        function updateDisplay() {
            const cells = document.querySelectorAll('.cell');
            
            for (let i = 0; i < 81; i++) {
                const row = Math.floor(i / 9);
                const col = i % 9;
                const cell = cells[i];
                
                cell.textContent = grid[row][col] || '';
                cell.classList.remove('error');
                
                if (grid[row][col] !== 0 && !isValidMove(row, col, grid[row][col])) {
                    cell.classList.add('error');
                }
            }
        }

        function isValidMove(row, col, num) {
            // Check row
            for (let c = 0; c < 9; c++) {
                if (c !== col && grid[row][c] === num) return false;
            }
            
            // Check column
            for (let r = 0; r < 9; r++) {
                if (r !== row && grid[r][col] === num) return false;
            }
            
            // Check 3x3 box
            const boxRow = Math.floor(row / 3) * 3;
            const boxCol = Math.floor(col / 3) * 3;
            
            for (let r = boxRow; r < boxRow + 3; r++) {
                for (let c = boxCol; c < boxCol + 3; c++) {
                    if ((r !== row || c !== col) && grid[r][c] === num) return false;
                }
            }
            
            return true;
        }

        function generateSudoku() {
            // Reset grids
            grid = Array(9).fill().map(() => Array(9).fill(0));
            solution = Array(9).fill().map(() => Array(9).fill(0));
            
            // Fill diagonal 3x3 boxes first
            fillDiagonal();
            
            // Fill remaining cells
            solveSudoku(solution);
            
            // Copy solution to grid
            for (let i = 0; i < 9; i++) {
                for (let j = 0; j < 9; j++) {
                    grid[i][j] = solution[i][j];
                }
            }
            
            // Remove numbers based on difficulty
            const cellsToRemove = 81 - difficultySettings[difficulty];
            for (let i = 0; i < cellsToRemove; i++) {
                let row, col;
                do {
                    row = Math.floor(Math.random() * 9);
                    col = Math.floor(Math.random() * 9);
                } while (grid[row][col] === 0);
                
                grid[row][col] = 0;
            }
        }

        function fillDiagonal() {
            for (let i = 0; i < 9; i += 3) {
                fillBox(i, i);
            }
        }

        function fillBox(row, col) {
            const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];
            shuffleArray(nums);
            
            let index = 0;
            for (let i = 0; i < 3; i++) {
                for (let j = 0; j < 3; j++) {
                    solution[row + i][col + j] = nums[index++];
                }
            }
        }

        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        function solveSudoku(board) {
            for (let row = 0; row < 9; row++) {
                for (let col = 0; col < 9; col++) {
                    if (board[row][col] === 0) {
                        for (let num = 1; num <= 9; num++) {
                            if (isValidSudokuMove(board, row, col, num)) {
                                board[row][col] = num;
                                if (solveSudoku(board)) return true;
                                board[row][col] = 0;
                            }
                        }
                        return false;
                    }
                }
            }
            return true;
        }

        function isValidSudokuMove(board, row, col, num) {
            // Check row
            for (let c = 0; c < 9; c++) {
                if (board[row][c] === num) return false;
            }
            
            // Check column
            for (let r = 0; r < 9; r++) {
                if (board[r][col] === num) return false;
            }
            
            // Check 3x3 box
            const boxRow = Math.floor(row / 3) * 3;
            const boxCol = Math.floor(col / 3) * 3;
            
            for (let r = boxRow; r < boxRow + 3; r++) {
                for (let c = boxCol; c < boxCol + 3; c++) {
                    if (board[r][c] === num) return false;
                }
            }
            
            return true;
        }

        function checkWin() {
            for (let row = 0; row < 9; row++) {
                for (let col = 0; col < 9; col++) {
                    if (grid[row][col] === 0 || !isValidMove(row, col, grid[row][col])) {
                        return false;
                    }
                }
            }
            
            setTimeout(() => {
                alert('Congratulations! You solved the Sudoku! ðŸŽ‰');
            }, 100);
            return true;
        }

        function setDifficulty(level) {
            difficulty = level;
            document.querySelectorAll('.difficulty button').forEach(btn => {
                btn.classList.remove('active');
            });
            document.getElementById(`${level}-btn`).classList.add('active');
        }

        function newGame() {
            generateSudoku();
            updateDisplay();
            selectedCell = null;
            document.querySelectorAll('.cell').forEach(cell => {
                cell.classList.remove('selected');
            });
        }

        // Initialize game
        createGrid();
        newGame();
    </script>
</body>
</html>