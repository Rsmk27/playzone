<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tetris | PlayZone</title>
    <style>
        body {
            background: linear-gradient(45deg, #1a1a2e, #16213e, #0f3460);
            color: #fff;
            font-family: 'Inter', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
        }

        .game-container {
            display: flex;
            gap: 30px;
            align-items: flex-start;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }

        .game-board {
            background: #000;
            border: 3px solid #00ffff;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
        }

        .info-panel {
            display: flex;
            flex-direction: column;
            gap: 20px;
            min-width: 200px;
        }

        .info-card {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            padding: 20px;
            text-align: center;
        }

        .score {
            font-size: 2rem;
            font-weight: bold;
            color: #00ffff;
            text-shadow: 0 0 10px rgba(0, 255, 255, 0.5);
        }

        .level, .lines {
            font-size: 1.5rem;
            margin: 10px 0;
        }

        .next-piece {
            width: 80px;
            height: 80px;
            background: #000;
            border: 2px solid #00ffff;
            border-radius: 8px;
            margin: 10px auto;
        }

        .controls {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 15px;
            font-size: 0.9rem;
            line-height: 1.6;
        }

        .controls h4 {
            margin-bottom: 10px;
            color: #00ffff;
        }

        .back-btn {
            padding: 12px 24px;
            background: linear-gradient(45deg, #00ffff, #0080ff);
            border: none;
            border-radius: 8px;
            color: white;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-block;
            margin-top: 20px;
        }

        .back-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0, 255, 255, 0.3);
        }

        @media (max-width: 768px) {
            .game-container {
                flex-direction: column;
                align-items: center;
            }
            
            .info-panel {
                flex-direction: row;
                flex-wrap: wrap;
                justify-content: center;
                min-width: auto;
            }
            
            .info-card {
                flex: 1;
                min-width: 150px;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <canvas id="tetrisCanvas" class="game-board" width="300" height="600"></canvas>
        
        <div class="info-panel">
            <div class="info-card">
                <h3>Score</h3>
                <div class="score" id="score">0</div>
            </div>
            
            <div class="info-card">
                <h3>Level</h3>
                <div class="level" id="level">1</div>
            </div>
            
            <div class="info-card">
                <h3>Lines</h3>
                <div class="lines" id="lines">0</div>
            </div>
            
            <div class="info-card">
                <h3>Next</h3>
                <canvas id="nextCanvas" class="next-piece" width="80" height="80"></canvas>
            </div>
            
            <div class="info-card controls">
                <h4>Controls</h4>
                <div>← → Move</div>
                <div>↓ Soft Drop</div>
                <div>↑ Rotate</div>
                <div>Space Hard Drop</div>
            </div>
            
            <a href="../index.html" class="back-btn">⬅ Back to Home</a>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('tetrisCanvas');
        const ctx = canvas.getContext('2d');
        const nextCanvas = document.getElementById('nextCanvas');
        const nextCtx = nextCanvas.getContext('2d');

        const BOARD_WIDTH = 10;
        const BOARD_HEIGHT = 20;
        const BLOCK_SIZE = 30;

        let board = Array(BOARD_HEIGHT).fill().map(() => Array(BOARD_WIDTH).fill(0));
        let score = 0;
        let level = 1;
        let lines = 0;
        let dropTime = 0;
        let lastTime = 0;

        const pieces = [
            { shape: [[1,1,1,1]], color: '#00ffff' }, // I
            { shape: [[1,1],[1,1]], color: '#ffff00' }, // O
            { shape: [[0,1,0],[1,1,1]], color: '#800080' }, // T
            { shape: [[0,1,1],[1,1,0]], color: '#00ff00' }, // S
            { shape: [[1,1,0],[0,1,1]], color: '#ff0000' }, // Z
            { shape: [[1,0,0],[1,1,1]], color: '#ff8000' }, // J
            { shape: [[0,0,1],[1,1,1]], color: '#0000ff' }  // L
        ];

        let currentPiece = null;
        let nextPiece = null;

        function createPiece() {
            const piece = pieces[Math.floor(Math.random() * pieces.length)];
            return {
                shape: piece.shape,
                color: piece.color,
                x: Math.floor(BOARD_WIDTH / 2) - Math.floor(piece.shape[0].length / 2),
                y: 0
            };
        }

        function drawBlock(x, y, color, context = ctx) {
            context.fillStyle = color;
            context.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
            context.strokeStyle = '#333';
            context.strokeRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        }

        function drawBoard() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            for (let y = 0; y < BOARD_HEIGHT; y++) {
                for (let x = 0; x < BOARD_WIDTH; x++) {
                    if (board[y][x]) {
                        drawBlock(x, y, board[y][x]);
                    }
                }
            }
        }

        function drawPiece(piece, context = ctx, offsetX = 0, offsetY = 0) {
            piece.shape.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value) {
                        if (context === ctx) {
                            drawBlock(piece.x + x, piece.y + y, piece.color);
                        } else {
                            context.fillStyle = piece.color;
                            context.fillRect(
                                (x + offsetX) * 20, 
                                (y + offsetY) * 20, 
                                20, 20
                            );
                        }
                    }
                });
            });
        }

        function drawNext() {
            nextCtx.clearRect(0, 0, nextCanvas.width, nextCanvas.height);
            if (nextPiece) {
                drawPiece(nextPiece, nextCtx, 1, 1);
            }
        }

        function isValidPosition(piece, dx = 0, dy = 0) {
            for (let y = 0; y < piece.shape.length; y++) {
                for (let x = 0; x < piece.shape[y].length; x++) {
                    if (piece.shape[y][x]) {
                        const newX = piece.x + x + dx;
                        const newY = piece.y + y + dy;
                        
                        if (newX < 0 || newX >= BOARD_WIDTH || 
                            newY >= BOARD_HEIGHT || 
                            (newY >= 0 && board[newY][newX])) {
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        function placePiece() {
            currentPiece.shape.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value) {
                        board[currentPiece.y + y][currentPiece.x + x] = currentPiece.color;
                    }
                });
            });
            
            clearLines();
            currentPiece = nextPiece;
            nextPiece = createPiece();
            
            if (!isValidPosition(currentPiece)) {
                gameOver();
            }
        }

        function clearLines() {
            let linesCleared = 0;
            
            for (let y = BOARD_HEIGHT - 1; y >= 0; y--) {
                if (board[y].every(cell => cell !== 0)) {
                    board.splice(y, 1);
                    board.unshift(Array(BOARD_WIDTH).fill(0));
                    linesCleared++;
                    y++; // Check the same line again
                }
            }
            
            if (linesCleared > 0) {
                lines += linesCleared;
                score += linesCleared * 100 * level;
                level = Math.floor(lines / 10) + 1;
                updateStats();
            }
        }

        function rotatePiece() {
            const rotated = currentPiece.shape[0].map((_, i) =>
                currentPiece.shape.map(row => row[i]).reverse()
            );
            
            const originalShape = currentPiece.shape;
            currentPiece.shape = rotated;
            
            if (!isValidPosition(currentPiece)) {
                currentPiece.shape = originalShape;
            }
        }

        function updateStats() {
            document.getElementById('score').textContent = score;
            document.getElementById('level').textContent = level;
            document.getElementById('lines').textContent = lines;
        }

        function gameOver() {
            alert(`Game Over! Final Score: ${score}`);
            resetGame();
        }

        function resetGame() {
            board = Array(BOARD_HEIGHT).fill().map(() => Array(BOARD_WIDTH).fill(0));
            score = 0;
            level = 1;
            lines = 0;
            currentPiece = createPiece();
            nextPiece = createPiece();
            updateStats();
        }

        function gameLoop(time = 0) {
            const deltaTime = time - lastTime;
            lastTime = time;
            
            dropTime += deltaTime;
            if (dropTime > 1000 / level) {
                if (currentPiece && isValidPosition(currentPiece, 0, 1)) {
                    currentPiece.y++;
                } else if (currentPiece) {
                    placePiece();
                }
                dropTime = 0;
            }
            
            drawBoard();
            if (currentPiece) {
                drawPiece(currentPiece);
            }
            drawNext();
            
            requestAnimationFrame(gameLoop);
        }

        // Controls
        document.addEventListener('keydown', (e) => {
            if (!currentPiece) return;
            
            switch(e.key) {
                case 'ArrowLeft':
                    if (isValidPosition(currentPiece, -1, 0)) {
                        currentPiece.x--;
                    }
                    break;
                case 'ArrowRight':
                    if (isValidPosition(currentPiece, 1, 0)) {
                        currentPiece.x++;
                    }
                    break;
                case 'ArrowDown':
                    if (isValidPosition(currentPiece, 0, 1)) {
                        currentPiece.y++;
                        score++;
                        updateStats();
                    }
                    break;
                case 'ArrowUp':
                    rotatePiece();
                    break;
                case ' ':
                    while (isValidPosition(currentPiece, 0, 1)) {
                        currentPiece.y++;
                        score += 2;
                    }
                    updateStats();
                    break;
            }
        });

        // Initialize game
        currentPiece = createPiece();
        nextPiece = createPiece();
        updateStats();
        gameLoop();
    </script>
</body>
</html>